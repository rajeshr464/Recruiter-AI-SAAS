# Generated by Django 5.2.5 on 2025-09-20 01:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModelMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('global', 'Global AI Model'), ('tenant', 'Tenant-Specific Model')], max_length=20)),
                ('model_path', models.CharField(max_length=512)),
                ('version', models.CharField(default='1.0.0', max_length=50)),
                ('status', models.CharField(choices=[('training', 'Training'), ('active', 'Active'), ('deprecated', 'Deprecated'), ('failed', 'Failed')], default='training', max_length=20)),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('training_samples', models.IntegerField(default=0)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('features_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('hyperparameters', models.JSONField(blank=True, default=dict)),
                ('feature_config', models.JSONField(blank=True, default=dict)),
                ('tenant', models.ForeignKey(blank=True, help_text='Null for global models', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('tenant', 'model_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='FeatureExtractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extraction_type', models.CharField(choices=[('resume', 'Resume Text'), ('job', 'Job Description'), ('candidate', 'Candidate Profile')], max_length=20)),
                ('entity_id', models.IntegerField()),
                ('extracted_features', models.JSONField(default=dict)),
                ('feature_count', models.IntegerField(default=0)),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIMatchingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.IntegerField()),
                ('candidate_id', models.IntegerField()),
                ('match_score', models.FloatField(help_text='0.0 to 1.0 matching score')),
                ('confidence', models.FloatField(help_text='0.0 to 1.0 confidence level')),
                ('skills_score', models.FloatField(default=0.0)),
                ('experience_score', models.FloatField(default=0.0)),
                ('location_score', models.FloatField(default=0.0)),
                ('education_score', models.FloatField(default=0.0)),
                ('reasoning', models.JSONField(default=dict, help_text='AI reasoning for the match score')),
                ('feature_importance', models.JSONField(default=dict, help_text='Feature importance weights used in scoring')),
                ('model_version', models.CharField(max_length=50)),
                ('human_feedback', models.JSONField(blank=True, default=dict, help_text='Recruiter feedback for model learning')),
                ('actual_outcome', models.CharField(blank=True, help_text='Actual hiring outcome for learning', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.aimodelmetadata')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'ordering': ['-match_score', '-created_at'],
                'unique_together': {('tenant', 'job_id', 'candidate_id')},
            },
        ),
        migrations.CreateModel(
            name='ModelTrainingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_type', models.CharField(choices=[('global_initial', 'Initial Global Training'), ('global_retrain', 'Global Model Retraining'), ('tenant_initial', 'Initial Tenant Training'), ('tenant_retrain', 'Tenant Model Retraining'), ('tenant_clone', 'Clone Global to Tenant')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('training_config', models.JSONField(default=dict, help_text='Training parameters and configuration')),
                ('progress', models.IntegerField(default=0, help_text='0-100 percentage')),
                ('current_step', models.CharField(blank=True, max_length=100)),
                ('result_metadata', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_engine.aimodelmetadata')),
                ('tenant', models.ForeignKey(blank=True, help_text='Null for global training tasks', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
